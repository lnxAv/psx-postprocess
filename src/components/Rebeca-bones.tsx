/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.18 ./public/rebeca-bones.glb --transform --types 
Files: ./public/rebeca-bones.glb [314.42KB] > C:\Users\Work\Desktop\psx-postprocess\rebeca-bones-transformed.glb [109.09KB] (65%)
*/

import * as THREE from 'three'
import React, { useEffect, useRef } from 'react'
import { useGLTF, useAnimations, useTexture } from '@react-three/drei'
import { GLTF } from 'three-stdlib'

type GLTFResult = GLTF & {
  nodes: {
    Cube: THREE.SkinnedMesh
    root: THREE.Bone
  }
  materials: {
    ['Texture Smile']: THREE.MeshStandardMaterial
  }
  animations: GLTFAction[]
}

type ActionName = 'Look' | 'Stand'
interface GLTFAction extends THREE.AnimationClip {
  name: ActionName
}
type ContextType = Record<string, React.ForwardRefExoticComponent<JSX.IntrinsicElements['skinnedMesh'] | JSX.IntrinsicElements['bone']>>

export function Rebeca(props: JSX.IntrinsicElements['group']) {
  const group = useRef<THREE.Group>(null)
  const texture = useTexture('/rebeca_tex.png')
  const { nodes, animations } = useGLTF('/rebeca-bones-transformed.glb') as GLTFResult
  const { actions } = useAnimations(animations, group)
  useEffect(()=>{
    if(actions.Stand){
      actions.Stand.play()
    }
  }, [] )
  
  return (
    <group ref={group} {...props} dispose={null}>
      <group name="AuxScene">
        <group name="Scene">
          <group name="Character">
            <primitive object={nodes.root} />
            <skinnedMesh name="Cube" geometry={nodes.Cube.geometry} skeleton={nodes.Cube.skeleton} castShadow receiveShadow onClick={(e)=>actions.Look?.fadeIn(0.5).play()}>
              <meshStandardMaterial map={texture} map-flipY={false} side={THREE.DoubleSide}/>
            </skinnedMesh>
          </group>
        </group>
      </group>
    </group>
  )
}

useGLTF.preload('/rebeca-bones-transformed.glb')
